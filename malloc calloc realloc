//Realloc int*p=realloc(p,20);当使用malloc/calloc函数内存不够用的时候，可以使用realloc函数追加空间
//Realloc 函数使用的注意事项：

//1.	如果p指向的空间的后面的空间够我们追加的空间，reaclloc函数就会在原来的空间的后面追加我们想要的总体的空间大小。追加之后，返回p；
//2.	如果p指向的空间的后面没有足够的空间可以追加，则realloc函数会重新找一个新的空间来开辟一块满足需求的空间，并将原来的空间中的数据拷贝过来，释放旧的内存空间，最后返回新开辟的内存空间的地址。
//3.	使用一个新的变量来接受realloc函数返回的地址，他可能和原来的变量的地址不相同，可以通过if语句进行比较。



#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<errno.h>

int main()
{
	//calloc开辟一个数组空间，值全为0；
	int* p = malloc(10, sizeof(int));
	if (p == NULL)
	{
		printf("%s\n", strerror(errno));
	}
	else
	{
		for (int i = 0; i < 10; i++)
		{
			*(p + i) = i;
		}
		for (int i = 0; i < 10; i++)
		{
			printf("%d ", *(p + i));
		}
	}
	//用完free函数使用的空间，并使指针指向NULL
	free(p);
	p = NULL;
	return 0;
}
int main()
{
	//calloc
	int* p = calloc(10, sizeof(int));
	if (p == NULL)
	{
		printf("%s\n", strerror(errno));
	}
	else
	{
		for (int i = 0; i < 10; i++)
		{
			printf("%d ", *(p + i));
		}
	}
	free(p);
	p = NULL;
	return 0;
}
int main()
{

	//error
	//对NULL进行解引用
	//越界访问 开辟的字节不够使用，产生越界访问的错误。
	//对非动态开辟的空间进行free，error
	//使用free释放开辟内存的一部分
	//使用free释放一个开辟的空间两次
	//动态开辟的内存未释放 造成内存泄露while（1）{malloc(1)},将会一直申请内存，造成内存泄露。
	int* p = (int *)malloc(40,sizeof(int));//calloc(数组大小，数组元素大小)
	if (p == NULL)
	{
		printf("%s\n", strerror(errno));
		return 0;
	}
		int i = 0;
		for (i = 0; i < 10; i++)
		{
			*(p + i) = i;
		}
		for (int j = 0; j < 10; j++)
		{
			printf("%d ", *(p+j));
		}	
	free(p);
	p = NULL;
	return 0;
}

void test()
{
	char*str = NULL;
	
	str = (char*)malloc(100);
	strcpy(str, "hello word");
	printf(str);
	free(str);
	str = NULL;
}
int main()
{
	test();
	return 0;
}
